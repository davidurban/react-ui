@import '../settings/forms';
@import '../themes/forms';
@import '../tools/icons';
@import 'explode';
@import 'transitions';

// Foundation
@mixin form-field() {
  position: relative;
  display: inline-flex;
}

@mixin form-field-input() {
  @include transition((opacity, color, border, background, box-shadow));

  width: 100%;
  min-width: $form-field-default-width;
  height: $form-field-height;
  padding: $form-field-padding;
  font-weight: $form-field-font-weight;
  line-height: $form-field-line-height;
  font-family: $form-field-font-family;
  vertical-align: middle;
  border: $form-field-border-width solid $form-field-border-color;
  border-radius: $form-field-border-radius;
  box-shadow: none;

  &::placeholder {
    opacity: 1;
    color: $form-field-placeholder-color;
  }

  &:hover {
    border-color: $form-field-hover-border-color;
  }

  &:focus {
    border-color: $form-field-focus-border-color;
  }

  &:disabled {
    @include form-field-disabled();

    // Override hover styles
    border-color: $form-field-border-color;
  }
}

@mixin form-field-input-text() {
  &[size] {
    min-width: auto;
  }
}

@mixin form-field-input-textarea() {
  height: auto;
  min-height: $form-field-height;
  resize: vertical;

  &[cols] {
    min-width: auto;
  }
}

@mixin form-field-input-select() {
  padding-right: calc(#{$form-field-caret-size} + 2 * #{map-get($offset-values, 3)});
  appearance: none;

  &::-ms-expand {
    display: none;
  }
}

@mixin form-field-input-multiple-select() {
  height: auto;
  min-height: $form-field-height;
}

@mixin form-field-caret() {
  position: absolute;
  top: 50%;
  right: map-get($offset-values, 3);
  width: $form-field-caret-size;
  height: $form-field-caret-size;
  background-image: icon-generate-caret($form-field-caret-color);
  background-size: contain;
  background-repeat: no-repeat;
  transform: translateY(-50%);
  pointer-events: none;

  .input:disabled ~ & {
    @include form-field-disabled();
  }
}

@mixin form-field-bottom-line() {
  @include transition((transform, opacity), 180ms);

  opacity: 0;
  width: 100%;
  height: $form-field-bottom-line-height;
  margin-top: -$form-field-bottom-line-height;
  transform: scaleX(0);
  transform-origin: center center;
  pointer-events: none;

  .input:focus ~ & {
    opacity: 1;
    background-color: $form-field-focus-border-color;
    transform: scaleX(1);
  }
}

@mixin form-field-helper-text() {
  font-size: $form-field-helper-text-font-size;
  color: $form-field-helper-text-color;
}

@mixin form-field-required-label() {
  &::after {
    content: $form-field-required-sign;
    color: $form-field-required-sign-color;
  }
}

// Variants
@mixin form-field-input-variant($variant) {
  $variant-states: map-get($form-field-variants, $variant);

  @include explode(map-get($variant-states, default));

  @if $variant == filled {
    border-top-color: transparent;
    border-right-color: transparent;
    border-left-color: transparent;
    border-bottom-right-radius: 0;
    border-bottom-left-radius: 0;
  }

  &:focus {
    @include explode(map-get($variant-states, focus));
  }
}

// States
@mixin form-field-disabled() {
  opacity: 0.5;
  box-shadow: none;
  cursor: not-allowed;
}

@mixin form-field-state($state) {
  $state-properties: map-get($form-field-states, $state);

  .input {
    border-color: map-get($state-properties, border-color);
    background-color: map-get($state-properties, background-color);

    &:hover {
      border-color: $form-field-hover-border-color;
    }

    &:focus {
      border-color: $form-field-focus-border-color;
    }
  }

  .helperText {
    color: map-get($state-properties, color);
  }

  &.rootVariantFilled .input {
    border-top-color: transparent;
    border-right-color: transparent;
    border-left-color: transparent;
  }
}

// Layouts
// 1. Unfortunately, `align-items: baseline` does not work with empty inputs in Safari
// so we must emulate this behavior.
@mixin form-field-full-width() {
  display: flex;
  width: 100%;

  .inputContainer {
    flex-grow: 1;
  }
}

@mixin form-field-layout-horizontal() {
  &,
  .container {
    flex-direction: row;
    align-items: center; // 1.
  }

  .container {
    display: flex;
    flex-grow: 1;
  }

  .label {
    min-width: $form-field-horizontal-label-min-width;
    padding-right: $form-field-horizontal-inner-gap;
    margin-top: calc(#{$form-field-input-font-size} - #{$form-field-label-font-size}); // 1.
    text-align: $form-field-horizontal-label-alignment;
  }

  .helperText {
    padding-left: $form-field-horizontal-inner-gap;
    margin-top: calc(#{$form-field-input-font-size} - #{$form-field-helper-text-font-size}); // 1.
  }
}

@mixin form-field-layout-vertical() {
  flex-direction: column;

  .label {
    padding-bottom: $form-field-vertical-inner-gap;
  }

  .helperText {
    padding-top: $form-field-vertical-inner-gap;
  }
}

// Relationships
// 1. Increase spacing in horizontal layout to visually separate fields.
// 2. Reset horizontal spacing for vertical neighbors.
@mixin form-field-horizontal-neighbor() {
  &:not(:last-of-type) {
    margin-right: $form-field-horizontal-outer-spacing;
  }

  &.rootLayoutHorizontal:not(:last-of-type) {
    margin-right: calc(2 * #{$form-field-horizontal-outer-spacing}); // 1.
  }
}

@mixin form-field-vertical-neighbor() {
  &:not(:last-of-type) {
    margin-bottom: $form-field-vertical-outer-spacing;
  }

  &:not(:last-of-type),
  &.rootLayoutHorizontal:not(:last-of-type) {
    margin-right: 0; // 2.
  }
}
