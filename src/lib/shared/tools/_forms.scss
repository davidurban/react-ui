@import '../settings/forms';
@import '../themes/forms';
@import 'breakpoints';
@import 'explode';
@import 'transitions';

//
// Foundation
// ==========
//
// 1. Get ready for positioning of bottom line and caret.
// 2. Override hover style of disabled input.
// 3. Always prefer the `size` attribute when defined.

@mixin form-field() {
  display: inline-flex;
}

@mixin form-field-container() {
  display: flex;
}

@mixin form-field-input-container() {
  position: relative; // 1.
}

@mixin form-field-input() {
  @include transition((opacity, color, border, background, box-shadow));

  width: $form-field-input-width;
  min-width: $form-field-input-min-width;
  font-weight: $form-field-font-weight;
  line-height: $form-field-line-height;
  font-family: $form-field-font-family;
  vertical-align: middle;
  border: $form-field-border-width solid $form-field-border-color;
  border-radius: $form-field-border-radius;
  box-shadow: none;

  &::placeholder {
    opacity: 1;
    color: $form-field-placeholder-color;
  }

  &:hover {
    border-color: $form-field-hover-border-color;
  }

  &:focus {
    border-color: $form-field-focus-border-color;
  }

  &:disabled {
    @include form-field-disabled();

    border-color: $form-field-border-color; // 2.
  }
}

@mixin form-field-input-text() {
  &[size] {
    width: auto; // 3.
    min-width: auto; // 3.
  }
}

@mixin form-field-input-textarea() {
  resize: vertical;

  &[cols] {
    min-width: auto;
  }
}

@mixin form-field-input-select() {
  padding-right: calc(#{$form-field-caret-size} - 2 * #{$form-field-border-width} + #{map-get($offset-values, 2)});
  appearance: none;

  &::-ms-expand {
    display: none;
  }
}

@mixin form-field-caret() {
  @include transition(border);

  position: absolute; // 1.
  top: $form-field-border-width;
  right: $form-field-border-width;
  bottom: $form-field-border-width;
  display: flex;
  align-items: center;
  justify-content: center;
  width: calc(#{$form-field-caret-size} - 2 * #{$form-field-border-width});
  border-top-right-radius: $form-field-border-radius;
  border-bottom-right-radius: $form-field-border-radius;
  pointer-events: none;

  .input:disabled ~ & {
    @include form-field-disabled();
  }
}

@mixin form-field-bottom-line() {
  @include transition((transform, opacity), 180ms);

  position: absolute;
  bottom: 0;
  opacity: 0;
  width: 100%;
  height: $form-field-bottom-line-height;
  transform: scaleX(0);
  transform-origin: center center;
  pointer-events: none;

  .input:focus ~ & {
    opacity: 1;
    background-color: $form-field-focus-border-color;
    transform: scaleX(1);
  }
}

@mixin form-field-helper-text() {
  font-style: $form-field-helper-text-font-style;
  font-size: $form-field-helper-text-font-size;
  line-height: $form-field-helper-text-line-height;
  color: $form-field-helper-text-color;
}

@mixin form-field-required-label() {
  &::after {
    content: $form-field-required-sign;
    color: $form-field-required-sign-color;
  }
}

//
// Variants
// ========

@mixin form-field-input-variant($variant) {
  $variant-states: map-get($form-field-variants, $variant);

  @include explode(map-get($variant-states, default));

  @if $variant == filled {
    border-top-color: transparent;
    border-right-color: transparent;
    border-left-color: transparent;
    border-bottom-right-radius: 0;
    border-bottom-left-radius: 0;
  }

  &:focus {
    @include explode(map-get($variant-states, focus));
  }
}

@mixin form-field-input-outline-caret() {
  $variant-states: map-get($form-field-variants, outline);

  & ~ .caret {
    border-left: $form-field-border-width $form-field-caret-border-style $form-field-border-color;
    background-color: $form-field-caret-background;
  }

  &:hover ~ .caret {
    border-left-color: $form-field-hover-border-color;
  }

  &:focus ~ .caret {
    border-left-color: $form-field-focus-border-color;
  }

  &:disabled ~ .caret {
    border-left-color: $form-field-border-color;
  }
}

//
// States
// ======

@mixin form-field-disabled() {
  opacity: 0.5;
  box-shadow: none;
  cursor: not-allowed;
}

@mixin form-field-state($state) {
  $state-properties: map-get($form-field-states, $state);

  .input {
    border-color: map-get($state-properties, border-color);
    background-color: map-get($state-properties, background-color);
  }

  .label,
  .helperText {
    color: map-get($state-properties, color);
  }

  &.rootVariantFilled .input {
    border-top-color: transparent;
    border-right-color: transparent;
    border-left-color: transparent;
  }
}

@mixin form-field-caret-state($state) {
  $state-properties: map-get($form-field-states, $state);

  &.rootVariantOutline .caret {
    border-left-color: map-get($state-properties, border-color);
  }
}

//
// Layouts
// =======
//
// 1. Override horizontal layout alignment.

@mixin form-field-layout-vertical() {
  &,
  .container {
    flex-direction: column;
    align-items: flex-start;
  }

  .label {
    padding-bottom: $form-field-vertical-inner-gap;
  }

  .helperText {
    padding-top: $form-field-vertical-inner-gap;
  }
}

@mixin form-field-layout-horizontal() {
  @include form-field-layout-vertical();

  @include breakpoint-up($form-field-horizontal-breakpoint) {
    &,
    .container {
      flex-direction: row;
      align-items: center;
    }

    .container {
      flex-grow: 1;
    }

    .label {
      min-width: $form-field-horizontal-label-min-width;
      padding-right: $form-field-horizontal-inner-gap;
      padding-bottom: 0;
      text-align: $form-field-horizontal-label-alignment;
    }

    .helperText {
      padding-top: 0;
      padding-left: $form-field-horizontal-inner-gap;
    }
  }
}

@mixin form-field-full-width() {
  width: 100%;

  &,
  .container {
    display: flex;
    align-items: stretch;
  }

  .inputContainer {
    flex-grow: 1;
  }

  .input {
    width: 100%;
  }

  &.rootLayoutHorizontal,
  &.rootLayoutHorizontal .container {
    align-items: center; // 1.
  }
}

//
// Sizes
// =====
//
// 1. Unfortunately, `align-items: baseline` does not work with empty inputs in Safari,
//    so we must emulate this behavior and align label text with input text manually.

@mixin form-field-size($size, $is-multiline: false) {
  $size-properties: map-get($form-field-sizes, $size);

  .input {
    @if $is-multiline {
      height: auto;
      min-height: map-get($size-properties, height);
    }

    @else {
      height: map-get($size-properties, height);
    }

    padding: map-get($size-properties, padding);
    font-size: map-get($size-properties, font-size);
  }

  &.rootLayoutHorizontal {
    @include breakpoint-up($form-field-horizontal-breakpoint) {
      .label {
        margin-top: ($form-field-line-height - $form-field-label-line-height) / 2; // 1.
      }

      .helperText {
        margin-top: ($form-field-line-height - $form-field-helper-text-line-height) / 2; // 1.
      }
    }
  }
}

//
// Relationships
// =============
//
// 1. Increase spacing in horizontal layout to visually separate fields.
// 2. Reset horizontal spacing for vertical neighbors.

@mixin form-field-horizontal-neighbor() {
  &:not(:last-of-type) {
    margin-right: $form-field-horizontal-outer-spacing;
  }

  &.rootLayoutHorizontal:not(:last-of-type) {
    margin-right: calc(2 * #{$form-field-horizontal-outer-spacing}); // 1.
  }
}

@mixin form-field-vertical-neighbor() {
  &:not(:last-of-type) {
    margin-bottom: $form-field-vertical-outer-spacing;
  }

  &:not(:last-of-type),
  &.rootLayoutHorizontal:not(:last-of-type) {
    margin-right: 0; // 2.
  }
}
